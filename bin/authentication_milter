#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Mail::Milter::Authentication;
use Mail::Milter::Authentication::Config qw{ get_config };

# CONFIG
my $CONFIG = get_config();
my $connection = $CONFIG->{'connection'};
my $pid_file = '/run/authentication_milter.pid';
my $daemon = 0;
my $help   = 0;

GetOptions (
    "daemon"    => \$daemon,
    "pidfile=s" => \$pid_file,
    "help"      => \$help
) or die "Error in command line arguments\n";

if ( $help ) {
    usage();
    exit 0;
}

Mail::Milter::Authentication::start({
    'connection' => $connection,
    'pid_file'   => $pid_file,
    'daemon'     => $daemon,
});

sub usage {
    print STDERR qq{Usage: $0 [-d|--daemon] [-p|--pidfile <file>] [-h|--help]

-h|--help
    Show this help.

-d|--daemon
    detatch from shell and run as a daemon

-p|--pidfile <file>
    Write the process PID to the given file.
    defaults to /run/authentication_milter.pid



Configuration
-------------

The milter reads configuration from /etc/authentication_milter.json

The configuration file format is as follows...

{
    "connection"             : "inet:12345\@localhost",  | The connection to use 
    "socketperms"            : "0777",                  | Permissions for socket
    "runas"                  : "nobody",                | Drop privs and run as this user
    "rungroup"               : "nogroup",               | Drop privs and run as this group (daemon only)
    "listen_backlog"         : 20,                      | socket listen backlog limit (default 20)
    "min_children"           : 20,                      | Max number of children to pre fork
    "max_children"           : 200,                     | Max number of children to pre fork
    "min_spare_children"     : 10,                      | Min number of spare children to maintain 
    "max_spare_children"     : 20,                      | Max number of spare children to maintain
    "max_requests_per_child" : 200,                     | Max number of requests per child process (prefork)

                                                        | Timeouts for callbacks, should be slightly lower
                                                        | than the corresponding timeouts in Postfix
                                                        | Timeouts are ignored if missing.
    "connect_timeout" : 30,                             | Timeout for Connect callbacks
    "command_timeout" : 30,                             | Timeout for Helo,Mail,Rcpt,Data and Unknown callbacks
    "content_timeout" : 300,                            | Timeout for Header,Eoh, Body and Eom callbacks

    "show_default_adsp" : "0",                        | Boolean, include default adsp results?

                                                      | Checks to include.
                                                      | "0" Do not include check.
                                                      | "1" Include check.
                                                      | "2" Include check ONLY if not a fail.

    "check_spf"        : "1",                         | Check SPF
                                                      | Skipped for authenticated, local, and trusted connections.
    "check_dkim"       : "1",                         | Check DKIM
    "check_dkim-adsp"  : "1",                         | Check ADSP
    "check_dmarc"      : "1",                         | Check DMARC
                                                      | Requires DKIM and SPF to be enabled
                                                      | Skipped for authenticated, local, and trusted connections.
    "check_ptr"        : "1",                         | Check PTR records against HELO domain
                                                      | Requires IPREV to be enabled
                                                      | Skipped for authenticated, local, and trusted connections.
    "check_iprev"      : "1",                         | Check IP Reverse
                                                      | Skipped for authenticated, local, and trusted connections.
    "check_senderid"   : "2",                         | Check SenderID
                                                      | Skipped for authenticated, local, and trusted connections.
    "check_auth"       : "1",                         | Check for authenticated connections
    "check_local_ip"   : "1",                         | Check for LOCAL IP connections

    "check_trusted_ip" : "1",                         | Check for a truseed IP Address
    "trusted_ip_list" : [                             | List of IP Addresses considered to be trusted
        "100.200.100.2",                              | CIDR Ranges are valid syntax
        "2001:44c2:3881:aa00::/56",
        "2001:44b8:3021:123:dead:beef:abcd:1234"
    ],

    "hosts_to_remove" : [                             | Hostnames (including subdomains thereof) for which we
        "example.com",                                | want to remove existing authentication results headers.
        "example.net"
    ],

    "dmarc_detect_list_id" : "1",                     | Detect a list ID and modify the DMARC authentication header
                                                      | to note this, useful when making rules for junking email
                                                      | as mailing lists frequently cause false DMARC failures.

    "tempfail_on_error" : "1",                        | Tempfail on errors
    "tempfail_on_error_authenticated" : "0",          | Tempfail on errors for Authenticated IP Connections
    "tempfail_on_error_local" : "0",                  | Tempfail on errors for Local IP Connections
    "tempfail_on_error_trusted" : "0",                | Tempfail on errors for Trusted IP Connections

    "remove_headers" : "yes"                          | Remove headers with conflicting host names (as defined above)
                                                      | "no" : do not remove
                                                      | "yes" : remove and add a header for each one
                                                      | "silent" : remove silently
                                                      | Does not run for trusted IP address connections
}



DMARC
-----

This milter uses Mail::DMARC as a backend for DMARC checks, this module requires that a configuration
file is setup.

You should create and populate /etc/mail-dmarc.ini

For DMARC reporting you are also required to setup a datastore, including creating a basic table
structure.  The detauls of this are to be found in the Mail::DMARC documentation.

At this time forensic reports are not supported by Mail::DMARC or this milter. Only aggregate reports will
be generated.

To check reports please use the dmarc_view_reports command, to send reports please use the dmarc_send_reports
command. These are included with the Mail::DMARC module.

};
}

