#!/usr/bin/perl

# Simple script which accepts email parameters
# and dumps them to a supplied SMTP style connection

use strict;
use warnings;

use Getopt::Long;
use IO::Socket::INET;
use IO::Socket::UNIX;

my $mailer_name;
my $mail_file;
my $mail_from;
my $rcpt_to;
my $x_name;
my $x_addr;
my $x_helo;

my $sock_type;
my $sock_path;
my $sock_host;
my $sock_port;

GetOptions (
    'mailer_name=s'  => \$mailer_name,
    'connect_ip=s'   => \$x_addr,
    'connect_name=s' => \$x_name,
    'helo_host=s'    => \$x_helo,
    'mail_from=s'    => \$mail_from,
    'rcpt_to=s'      => \$rcpt_to,
    'mail_file=s'    => \$mail_file,
    'sock_type=s'    => \$sock_type,
    'sock_path=s'    => \$sock_path,
    'sock_host=s'    => \$sock_host,
    'sock_port=s'    => \$sock_port,
) or die "Error in command line arguments\n";

my $mail_data = q{};

if ( $mail_file eq '-' ) {
    while ( my $l = <> ) {
        $mail_data .= $l;
    }
}
else {
    if ( ! -e $mail_file ) {
        die "Mail file $mail_file does not exist";
    }
    open my $inf, '<', $mail_file;
    my @all = <$inf>;
    $mail_data = join( q{}, @all );
    close $inf;
}

$mail_data =~ s/\015?\012/\015\012/g;
# Handle transparency
$mail_data =~ s/\015\012\./\015\012\.\./g;

my $sock;
if ( $sock_type eq 'inet' ) {
   $sock = IO::Socket::INET->new(
        'Proto' => 'tcp',
        'PeerAddr' => $sock_host,
        'PeerPort' => $sock_port,
    ) || die "could not open outbound SMTP socket: $!";
}
elsif ( $sock_type eq 'unix' ) {
   $sock = IO::Socket::UNIX->new(
        'Peer' => $sock_path,
    ) || die "could not open outbound SMTP socket: $!";
}

my $line = <$sock>;

if ( ! $line =~ /250/ ) {
    die "Unexpected SMTP response $line";
    return 0;
}

send_smtp_packet( $sock, 'HELO ' . $mailer_name,       '250' ) || die;

send_smtp_packet( $sock, 'XFORWARD NAME=' . $x_name,   '250' ) || die;
send_smtp_packet( $sock, 'XFORWARD ADDR=' . $x_addr,   '250' ) || die;
send_smtp_packet( $sock, 'XFORWARD HELO=' . $x_helo,   '250' ) || die;

send_smtp_packet( $sock, 'MAIL FROM:' . $mail_from, '250' ) || die;
send_smtp_packet( $sock, 'RCPT TO:' .   $rcpt_to,   '250' ) || die;
send_smtp_packet( $sock, 'DATA',                    '354' ) || die;

print $sock $mail_data;
print $sock "\r\n";

send_smtp_packet( $sock, '.',    '250' ) || return;
send_smtp_packet( $sock, 'QUIT', '221' ) || return;

$sock->close();

sub send_smtp_packet {
    my ( $socket, $send, $expect ) = @_;
    print $socket "$send\r\n";
    my $recv = <$socket>;
    if ( $recv =~ /^$expect/ ) {
        return 1;
    }
    else {
        die "SMTP Send expected $expect received $recv when sending $send";
        return 0;
    }
}
  
